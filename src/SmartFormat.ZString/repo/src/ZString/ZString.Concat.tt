<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="T4Common.t4" once="true" #>
using System.Runtime.CompilerServices;

namespace Cysharp.Text
{
    public static partial class ZString
    {
<# for(var i = 1; i <= TypeParamMax; i++) { #>
        /// <summary>Concatenates the string representation of some specified objects.</summary>
        public static string Concat<<#= CreateTypeArgument(i) #>>(<#= CreateParameters(i) #>)
        {
<# if(i == 1) { #>
            if (typeof(T1) == typeof(string))
            {
                return (arg1 != null) ? Unsafe.As<string>(arg1) : string.Empty;
            }

<# } #>
            var sb = new Utf16ValueStringBuilder(true);
            try
            {
<# for(var j = 0; j < i; j++) { #>
                if (typeof(T<#= j + 1 #>) == typeof(string))
                {
                    if(arg<#= j + 1 #> != null)
                    {
                        sb.Append(Unsafe.As<T<#= j + 1 #>, string>(ref arg<#= j + 1 #>));
                    }
                }
                else if (typeof(T<#= j + 1 #>) == typeof(int))
                {
                    sb.Append(Unsafe.As<T<#= j + 1 #>, int>(ref arg<#= j + 1 #>));
                }
                else
                {
                    sb.Append(arg<#= j + 1 #>);
                }

<# } #>
                return sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
        }

<# } #>
    }
}