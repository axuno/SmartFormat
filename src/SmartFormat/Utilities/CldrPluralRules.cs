//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//
//     Unicode Version: 16.0.0
//     CLDR Version: 47
//     Generation date: 2025-10-10 23:01:05 UTC
//
//     Changes to this file may cause incorrect behavior 
//     and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;

namespace SmartFormat.Utilities;

/// <summary>
/// The pluralization category of a number, as defined by the Unicode CLDR.
/// </summary>
internal enum PluralCategory
{
    Zero,
    One,
    Two,
    Few,
    Many,
    Other
}

internal sealed class CldrPluralRule
{
    public IReadOnlyList<PluralCategory> PossibleCategories { get; }
    public CldrPluralRules.PluralRuleDelegate Delegate { get; }

    public CldrPluralRule(IEnumerable<PluralCategory> possibleCategories, CldrPluralRules.PluralRuleDelegate ruleDelegate)
    {
        PossibleCategories = possibleCategories.ToArray();
        Delegate = ruleDelegate;
    }

    public PluralCategory GetCategory(decimal value)
    {
        return Delegate(value);
    }
}

/// <summary>
/// Provides functionality for determining plural categories based
/// on the CLDR (Common Locale Data Repository) pluralization rules.
/// <para/>
/// Download the CLDR JSON data file from: https://github.com/unicode-org/cldr-json
/// </summary>
/// <remarks>This class contains a collection of predefined pluralization
/// rules for various languages, as defined by the CLDR.
/// It allows developers to retrieve and apply the appropriate pluralization
/// rule for a given language, based on its ISO language code.
/// </remarks>
internal static class CldrPluralRules
{
    #region Plural Rule Delegates

    // For languages with a single form (e.g., Japanese, Chinese, Vietnamese), the category is 'other'.
    private static PluralCategory Singular(decimal value) => PluralCategory.Other;


    // Rule for: af, an, asa, az, bal, ...
    private static PluralCategory Rule1(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: ak, bho, csw, guw, ln, ...
    private static PluralCategory Rule2(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (IsInRange(n, 0m, 1m)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: am, as, bn, doi, fa, ...
    private static PluralCategory Rule3(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  0 || n  ==  1)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: ar, ars
    private static PluralCategory Rule4(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (IsInRange(n % 100, 3m, 10m)) return PluralCategory.Few;
        if (IsInRange(n % 100, 11m, 99m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ast, de, en, et, fi, ...
    private static PluralCategory Rule5(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: be
    private static PluralCategory Rule6(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && n % 100 != 11)) return PluralCategory.One;
        if ((IsInRange(n % 10, 2m, 4m) && !IsInRange(n % 100, 12m, 14m))) return PluralCategory.Few;
        if ((n % 10  ==  0 || IsInRange(n % 10, 5m, 9m) || IsInRange(n % 100, 11m, 14m))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: blo, ksh
    private static PluralCategory Rule7(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: br
    private static PluralCategory Rule8(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && !(n % 100 == 11m || n % 100 == 71m || n % 100 == 91m))) return PluralCategory.One;
        if ((n % 10  ==  2 && !(n % 100 == 12m || n % 100 == 72m || n % 100 == 92m))) return PluralCategory.Two;
        if (((IsInRange(n % 10, 3m, 4m) || n % 10 == 9m) && !(IsInRange(n % 100, 10m, 19m) || IsInRange(n % 100, 70m, 79m) || IsInRange(n % 100, 90m, 99m)))) return PluralCategory.Few;
        if ((n != 0 && n % 1000000  ==  0)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: bs, hr, sh, sr
    private static PluralCategory Rule9(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 10  ==  1 && i % 100 != 11) || (f % 10  ==  1 && f % 100 != 11))) return PluralCategory.One;
        if (((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14)) || (IsInRange(f % 10, 2, 4) && !IsInRange(f % 100, 12, 14)))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: ca, it, lld, pt-PT, scn, ...
    private static PluralCategory Rule10(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ceb, fil, tl
    private static PluralCategory Rule11(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && (i == 1 || i == 2 || i == 3)) || (v  ==  0 && !(i % 10 == 4 || i % 10 == 6 || i % 10 == 9)) || (v != 0 && !(f % 10 == 4 || f % 10 == 6 || f % 10 == 9)))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: cs, sk
    private static PluralCategory Rule12(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((IsInRange(i, 2, 4) && v  ==  0)) return PluralCategory.Few;
        if (v != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: cy
    private static PluralCategory Rule13(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (n  ==  3) return PluralCategory.Few;
        if (n  ==  6) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: da
    private static PluralCategory Rule14(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n  ==  1 || (t != 0 && (i == 0 || i == 1)))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: dsb, hsb
    private static PluralCategory Rule15(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 100  ==  1) || f % 100  ==  1)) return PluralCategory.One;
        if (((v  ==  0 && i % 100  ==  2) || f % 100  ==  2)) return PluralCategory.Two;
        if (((v  ==  0 && IsInRange(i % 100, 3, 4)) || IsInRange(f % 100, 3, 4))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: es
    private static PluralCategory Rule16(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ff, hy, kab
    private static PluralCategory Rule17(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i == 0 || i == 1)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: fr
    private static PluralCategory Rule18(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i == 0 || i == 1)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ga
    private static PluralCategory Rule19(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (IsInRange(n, 3m, 6m)) return PluralCategory.Few;
        if (IsInRange(n, 7m, 10m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: gd
    private static PluralCategory Rule20(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n == 1m || n == 11m)) return PluralCategory.One;
        if ((n == 2m || n == 12m)) return PluralCategory.Two;
        if ((IsInRange(n, 3m, 10m) || IsInRange(n, 13m, 19m))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: gv
    private static PluralCategory Rule21(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 10  ==  1)) return PluralCategory.One;
        if ((v  ==  0 && i % 10  ==  2)) return PluralCategory.Two;
        if ((v  ==  0 && (i % 100 == 0 || i % 100 == 20 || i % 100 == 40 || i % 100 == 60 || i % 100 == 80))) return PluralCategory.Few;
        if (v != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: he
    private static PluralCategory Rule22(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((i  ==  1 && v  ==  0) || (i  ==  0 && v != 0))) return PluralCategory.One;
        if ((i  ==  2 && v  ==  0)) return PluralCategory.Two;

        return PluralCategory.Other;
    }


    // Rule for: is
    private static PluralCategory Rule23(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((t  ==  0 && i % 10  ==  1 && i % 100 != 11) || (t % 10  ==  1 && t % 100 != 11))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: iu, naq, sat, se, sma, ...
    private static PluralCategory Rule24(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;

        return PluralCategory.Other;
    }


    // Rule for: kw
    private static PluralCategory Rule25(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (((n % 100 == 2m || n % 100 == 22m || n % 100 == 42m || n % 100 == 62m || n % 100 == 82m) || (n % 1000  ==  0 && (IsInRange(n % 100000, 1000m, 20000m) || n % 100000 == 40000m || n % 100000 == 60000m || n % 100000 == 80000m)) || (n != 0 && n % 1000000  ==  100000))) return PluralCategory.Two;
        if ((n % 100 == 3m || n % 100 == 23m || n % 100 == 43m || n % 100 == 63m || n % 100 == 83m)) return PluralCategory.Few;
        if ((n != 1 && (n % 100 == 1m || n % 100 == 21m || n % 100 == 41m || n % 100 == 61m || n % 100 == 81m))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: lag
    private static PluralCategory Rule26(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (((i == 0 || i == 1) && n != 0)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: lt
    private static PluralCategory Rule27(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && !IsInRange(n % 100, 11m, 19m))) return PluralCategory.One;
        if ((IsInRange(n % 10, 2m, 9m) && !IsInRange(n % 100, 11m, 19m))) return PluralCategory.Few;
        if (f != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: lv, prg
    private static PluralCategory Rule28(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  0 || IsInRange(n % 100, 11m, 19m) || (v  ==  2 && IsInRange(f % 100, 11, 19)))) return PluralCategory.Zero;
        if (((n % 10  ==  1 && n % 100 != 11) || (v  ==  2 && f % 10  ==  1 && f % 100 != 11) || (v != 2 && f % 10  ==  1))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: mk
    private static PluralCategory Rule29(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 10  ==  1 && i % 100 != 11) || (f % 10  ==  1 && f % 100 != 11))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: mo, ro
    private static PluralCategory Rule30(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((v != 0 || n  ==  0 || (n != 1 && IsInRange(n % 100, 1m, 19m)))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: mt
    private static PluralCategory Rule31(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if ((n  ==  0 || IsInRange(n % 100, 3m, 10m))) return PluralCategory.Few;
        if (IsInRange(n % 100, 11m, 19m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: pl
    private static PluralCategory Rule32(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14))) return PluralCategory.Few;
        if (((v  ==  0 && i != 1 && IsInRange(i % 10, 0, 1)) || (v  ==  0 && IsInRange(i % 10, 5, 9)) || (v  ==  0 && IsInRange(i % 100, 12, 14)))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: pt
    private static PluralCategory Rule33(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (IsInRange(i, 0, 1)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ru, uk
    private static PluralCategory Rule34(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 10  ==  1 && i % 100 != 11)) return PluralCategory.One;
        if ((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14))) return PluralCategory.Few;
        if (((v  ==  0 && i % 10  ==  0) || (v  ==  0 && IsInRange(i % 10, 5, 9)) || (v  ==  0 && IsInRange(i % 100, 11, 14)))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: shi
    private static PluralCategory Rule35(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  0 || n  ==  1)) return PluralCategory.One;
        if (IsInRange(n, 2m, 10m)) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: si
    private static PluralCategory Rule36(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((n == 0m || n == 1m) || (i  ==  0 && f  ==  1))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: sl
    private static PluralCategory Rule37(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 100  ==  1)) return PluralCategory.One;
        if ((v  ==  0 && i % 100  ==  2)) return PluralCategory.Two;
        if (((v  ==  0 && IsInRange(i % 100, 3, 4)) || v != 0)) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: tzm
    private static PluralCategory Rule38(decimal value)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((IsInRange(n, 0m, 1m) || IsInRange(n, 11m, 99m))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    #endregion

    private static readonly Dictionary<string, CldrPluralRule> DefaultLangToRule = new()
    {
        { "af", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ak", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "am", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "an", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ar", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule4) },
        { "ars", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule4) },
        { "as", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "asa", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ast", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "az", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "bal", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "be", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule6) },
        { "bem", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "bez", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "bg", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "bho", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "blo", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Other }, Rule7) },
        { "bm", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "bn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "bo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "br", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule8) },
        { "brx", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "bs", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule9) },
        { "ca", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "ce", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ceb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule11) },
        { "cgg", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "chr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ckb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "cs", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule12) },
        { "csw", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "cy", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule13) },
        { "da", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule14) },
        { "de", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "doi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "dsb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Other }, Rule15) },
        { "dv", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "dz", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ee", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "el", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "en", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "eo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "es", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule16) },
        { "et", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "eu", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "fa", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "ff", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule17) },
        { "fi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "fil", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule11) },
        { "fo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "fr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule18) },
        { "fur", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "fy", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "ga", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule19) },
        { "gd", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Other }, Rule20) },
        { "gl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "gsw", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "gu", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "guw", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "gv", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule21) },
        { "ha", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "haw", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "he", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule22) },
        { "hi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "hnj", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "hr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule9) },
        { "hsb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Other }, Rule15) },
        { "hu", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "hy", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule17) },
        { "ia", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "id", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ig", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ii", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "io", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "is", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule23) },
        { "it", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "iu", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "ja", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "jbo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "jgo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "jmc", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "jv", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "jw", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ka", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kab", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule17) },
        { "kaj", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kcg", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kde", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "kea", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "kk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kkj", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "km", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "kn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "ko", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ks", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ksb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ksh", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Other }, Rule7) },
        { "ku", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "kw", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule25) },
        { "ky", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "lag", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Other }, Rule26) },
        { "lb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "lg", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "lij", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "lkt", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "lld", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "ln", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "lo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "lt", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule27) },
        { "lv", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Other }, Rule28) },
        { "mas", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "mg", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "mgo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "mk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule29) },
        { "ml", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "mn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "mo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule30) },
        { "mr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ms", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "mt", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule31) },
        { "my", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "nah", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "naq", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "nb", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nd", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ne", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "nn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nnh", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "no", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nqo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "nr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nso", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "ny", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "nyn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "om", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "or", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "os", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "osa", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "pa", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "pap", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "pcm", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },
        { "pl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule32) },
        { "prg", new CldrPluralRule(new[] { PluralCategory.Zero, PluralCategory.One, PluralCategory.Other }, Rule28) },
        { "ps", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "pt", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule33) },
        { "pt-PT", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "rm", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ro", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule30) },
        { "rof", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ru", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule34) },
        { "rwk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "sah", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "saq", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "sat", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "sc", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "scn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "sd", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "sdh", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "se", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "seh", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ses", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "sg", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "sh", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule9) },
        { "shi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule35) },
        { "si", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule36) },
        { "sk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule12) },
        { "sl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Few, PluralCategory.Other }, Rule37) },
        { "sma", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "smi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "smj", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "smn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "sms", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Two, PluralCategory.Other }, Rule24) },
        { "sn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "so", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "sq", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "sr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Other }, Rule9) },
        { "ss", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ssy", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "st", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "su", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "sv", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "sw", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "syr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ta", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "te", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "teo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "th", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ti", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "tig", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "tk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "tl", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule11) },
        { "tn", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "to", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "tpi", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "tr", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ts", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "tzm", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule38) },
        { "ug", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "uk", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Few, PluralCategory.Many, PluralCategory.Other }, Rule34) },
        { "und", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "ur", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "uz", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "ve", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "vec", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Many, PluralCategory.Other }, Rule10) },
        { "vi", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "vo", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "vun", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "wa", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule2) },
        { "wae", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "wo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "xh", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "xog", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule1) },
        { "yi", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule5) },
        { "yo", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "yue", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "zh", new CldrPluralRule(new[] { PluralCategory.Other }, Singular) },
        { "zu", new CldrPluralRule(new[] { PluralCategory.One, PluralCategory.Other }, Rule3) },

    };

    public static Dictionary<string, CldrPluralRule> IsoCodeToRule { get; private set; } = new(DefaultLangToRule);

    public static void RestoreDefault() => IsoCodeToRule = new Dictionary<string, CldrPluralRule>(DefaultLangToRule);

    internal delegate PluralCategory PluralRuleDelegate(decimal value);
        
    public static CldrPluralRule GetPluralRule(string? twoLetterIsoCode)
    {
        if (twoLetterIsoCode != null && IsoCodeToRule.TryGetValue(twoLetterIsoCode, out var rule))
            return rule;
        
        return IsoCodeToRule["und"];
    }

    #region CLDR Helper methods

    /// <summary>
    /// n => The absolute value of the input number (e.g., 1, 2.5, 0.01)
    /// u => The integer digits of n (deprecated in CLDR, but may appear in legacy rules)
    /// v => Number of visible fraction digits in n (e.g., 1.5 => v = 1)
    /// w => Number of visible fraction digits excluding trailing zeros (e.g., 1.50 => w = 1)
    /// f => Visible fraction digits as an integer (e.g., 1.25 => f = 25)
    /// t => Visible fraction digits excluding trailing zeros (e.g., 1.50 => t = 5) 
    /// e => Always 0 for decimal input
    /// </summary>
    private static (decimal n, long i, int v, int w, long f, long t, int e) GetOperands(decimal value)
    {
        // Get absolute value for CLDR rules
        var n = Math.Abs(value);
    
        // GetBits() returns an array of four integers.
        // Extract the binary representation of the decimal:
        // decimals are stored as 96-bit integer with a scaling factor.
        // - bits[0], bits[1], bits[2] form the 96-bit integer value
        // - bits[3] contains the scale (bits 16-23) and sign (bit 31)
        var bits = decimal.GetBits(n);
    
        // Integer part (before decimal point)
        var i = (long) Math.Truncate(n);
    
        // v = number of visible fractional digits (including trailing zeros)
        // w = number of significant fractional digits (excluding trailing zeros)  
        // f = fractional digits as integer (with trailing zeros)
        // t = fractional digits as integer (without trailing zeros)
        // e = exponent (used for scientific notation)
        //     Only numbers like 1.0e6 should have e != 0
        //     Since we're parsing from regular decimal, e is always 0
        int v = 0, w = 0, e = 0;
        long f = 0, t = 0;

        // Extract scale factor - to see how many fractional digits exist
        // Move scale to the lowest 8 bits and filter lower 5 bits (0-28)
        var scale = (bits[3] >> 16) & 0x1F;
    
        if (scale > 0)
        {
            // Total visible fractional digits (v) equals the scale
            v = scale;
        
            // Calculate fractional part mathematically
            var fractionalPart = n - i;
            f = (long) (fractionalPart * Pow10(scale));
        
            // Remove trailing zeros for significant fractional digits (w)
            var temp = f;
            w = scale;
            while (temp % 10 == 0 && temp > 0)
            {
                temp /= 10;
                w--;
            }
            t = temp;
        }

        return (n, i, v, w, f, t, e);
    }

    private static decimal Pow10(int exponent) => (decimal) Math.Pow(10, exponent);

    private static bool IsInRange(long val, long min, long max) => val >= min && val <= max;
    
    private static bool IsInRange(decimal val, decimal min, decimal max)
    {
        // First check if value is within the range
        if (val < min || val > max)
            return false;

        // If min and max are integers (whole numbers), then require val to also be integer
        // This for rules like 'n = 2..4' which should not match '2.5'
        if (min == Math.Truncate(min) && max == Math.Truncate(max))
        {
            return val == Math.Truncate(val);
        }

        return true;
    }

    #endregion
}
