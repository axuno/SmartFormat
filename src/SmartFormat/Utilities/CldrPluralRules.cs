//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4 template 'CldrPluralRules.tt'.
//     Unicode Version: 16.0.0
//     CLDR Version: 47
//     Generation date: 2025-10-06 19:30:09 UTC
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Globalization;

namespace SmartFormat.Utilities;

/// <summary>
/// The pluralization category of a number, as defined by the Unicode CLDR.
/// </summary>
public enum PluralCategory
{
    Zero,
    One,
    Two,
    Few,
    Many,
    Other
}

/// <summary>
/// Provides functionality for determining plural categories based
/// on the CLDR (Common Locale Data Repository) pluralization rules.
/// <para/>
/// Download the CLDR JSON data file from: https://github.com/unicode-org/cldr-json
/// </summary>
/// <remarks>This class contains a collection of predefined pluralization
/// rules for various languages, as defined by the CLDR.
/// It allows developers to retrieve and apply the appropriate pluralization
/// rule for a given language, based on its ISO language code.
/// </remarks>
public static class CldrPluralRules
{
    #region Plural Rule Delegates

    // For languages with a single form (e.g., Japanese, Chinese, Vietnamese), the category is 'other'.
    private static PluralCategory Singular(decimal value, int pluralWordsCount) => PluralCategory.Other;


    // Rule for: af, an, asa, az, bal, ...
    private static PluralCategory Rule1(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: ak, bho, csw, guw, ln, ...
    private static PluralCategory Rule2(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (IsInRange(n, 0m, 1m)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: am, as, bn, doi, fa, ...
    private static PluralCategory Rule3(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  0 || n  ==  1)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: ar, ars
    private static PluralCategory Rule4(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (IsInRange(n % 100, 3m, 10m)) return PluralCategory.Few;
        if (IsInRange(n % 100, 11m, 99m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ast, de, en, et, fi, ...
    private static PluralCategory Rule5(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: be
    private static PluralCategory Rule6(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && n % 100 != 11)) return PluralCategory.One;
        if ((IsInRange(n % 10, 2m, 4m) && !IsInRange(n % 100, 12m, 14m))) return PluralCategory.Few;
        if ((n % 10  ==  0 || IsInRange(n % 10, 5m, 9m) || IsInRange(n % 100, 11m, 14m))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: blo, ksh
    private static PluralCategory Rule7(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: br
    private static PluralCategory Rule8(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && !(n % 100 == 11m || n % 100 == 71m || n % 100 == 91m))) return PluralCategory.One;
        if ((n % 10  ==  2 && !(n % 100 == 12m || n % 100 == 72m || n % 100 == 92m))) return PluralCategory.Two;
        if (((IsInRange(n % 10, 3m, 4m) || n % 10 == 9m) && !(IsInRange(n % 100, 10m, 19m) || IsInRange(n % 100, 70m, 79m) || IsInRange(n % 100, 90m, 99m)))) return PluralCategory.Few;
        if ((n != 0 && n % 1000000  ==  0)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: bs, hr, sh, sr
    private static PluralCategory Rule9(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 10  ==  1 && i % 100 != 11) || (f % 10  ==  1 && f % 100 != 11))) return PluralCategory.One;
        if (((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14)) || (IsInRange(f % 10, 2, 4) && !IsInRange(f % 100, 12, 14)))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: ca, it, lld, pt-PT, scn, ...
    private static PluralCategory Rule10(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ceb, fil, tl
    private static PluralCategory Rule11(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && (i == 1 || i == 2 || i == 3)) || (v  ==  0 && !(i % 10 == 4 || i % 10 == 6 || i % 10 == 9)) || (v != 0 && !(f % 10 == 4 || f % 10 == 6 || f % 10 == 9)))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: cs, sk
    private static PluralCategory Rule12(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((IsInRange(i, 2, 4) && v  ==  0)) return PluralCategory.Few;
        if (v != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: cy
    private static PluralCategory Rule13(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (n  ==  3) return PluralCategory.Few;
        if (n  ==  6) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: da
    private static PluralCategory Rule14(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n  ==  1 || (t != 0 && (i == 0 || i == 1)))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: dsb, hsb
    private static PluralCategory Rule15(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 100  ==  1) || f % 100  ==  1)) return PluralCategory.One;
        if (((v  ==  0 && i % 100  ==  2) || f % 100  ==  2)) return PluralCategory.Two;
        if (((v  ==  0 && IsInRange(i % 100, 3, 4)) || IsInRange(f % 100, 3, 4))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: es
    private static PluralCategory Rule16(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ff, hy, kab
    private static PluralCategory Rule17(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i == 0 || i == 1)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: fr
    private static PluralCategory Rule18(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i == 0 || i == 1)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ga
    private static PluralCategory Rule19(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if (IsInRange(n, 3m, 6m)) return PluralCategory.Few;
        if (IsInRange(n, 7m, 10m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: gd
    private static PluralCategory Rule20(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n == 1m || n == 11m)) return PluralCategory.One;
        if ((n == 2m || n == 12m)) return PluralCategory.Two;
        if ((IsInRange(n, 3m, 10m) || IsInRange(n, 13m, 19m))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: gv
    private static PluralCategory Rule21(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 10  ==  1)) return PluralCategory.One;
        if ((v  ==  0 && i % 10  ==  2)) return PluralCategory.Two;
        if ((v  ==  0 && (i % 100 == 0 || i % 100 == 20 || i % 100 == 40 || i % 100 == 60 || i % 100 == 80))) return PluralCategory.Few;
        if (v != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: he
    private static PluralCategory Rule22(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((i  ==  1 && v  ==  0) || (i  ==  0 && v != 0))) return PluralCategory.One;
        if ((i  ==  2 && v  ==  0)) return PluralCategory.Two;

        return PluralCategory.Other;
    }


    // Rule for: is
    private static PluralCategory Rule23(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((t  ==  0 && i % 10  ==  1 && i % 100 != 11) || (t % 10  ==  1 && t % 100 != 11))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: iu, naq, sat, se, sma, ...
    private static PluralCategory Rule24(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;

        return PluralCategory.Other;
    }


    // Rule for: kw
    private static PluralCategory Rule25(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (n  ==  1) return PluralCategory.One;
        if (((n % 100 == 2m || n % 100 == 22m || n % 100 == 42m || n % 100 == 62m || n % 100 == 82m) || (n % 1000  ==  0 && (IsInRange(n % 100000, 1000m, 20000m) || n % 100000 == 40000m || n % 100000 == 60000m || n % 100000 == 80000m)) || (n != 0 && n % 1000000  ==  100000))) return PluralCategory.Two;
        if ((n % 100 == 3m || n % 100 == 23m || n % 100 == 43m || n % 100 == 63m || n % 100 == 83m)) return PluralCategory.Few;
        if ((n != 1 && (n % 100 == 1m || n % 100 == 21m || n % 100 == 41m || n % 100 == 61m || n % 100 == 81m))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: lag
    private static PluralCategory Rule26(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  0) return PluralCategory.Zero;
        if (((i == 0 || i == 1) && n != 0)) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: lt
    private static PluralCategory Rule27(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  1 && !IsInRange(n % 100, 11m, 19m))) return PluralCategory.One;
        if ((IsInRange(n % 10, 2m, 9m) && !IsInRange(n % 100, 11m, 19m))) return PluralCategory.Few;
        if (f != 0) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: lv, prg
    private static PluralCategory Rule28(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((n % 10  ==  0 || IsInRange(n % 100, 11m, 19m) || (v  ==  2 && IsInRange(f % 100, 11, 19)))) return PluralCategory.Zero;
        if (((n % 10  ==  1 && n % 100 != 11) || (v  ==  2 && f % 10  ==  1 && f % 100 != 11) || (v != 2 && f % 10  ==  1))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: mk
    private static PluralCategory Rule29(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((v  ==  0 && i % 10  ==  1 && i % 100 != 11) || (f % 10  ==  1 && f % 100 != 11))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: mo, ro
    private static PluralCategory Rule30(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((v != 0 || n  ==  0 || (n != 1 && IsInRange(n % 100, 1m, 19m)))) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: mt
    private static PluralCategory Rule31(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (n  ==  1) return PluralCategory.One;
        if (n  ==  2) return PluralCategory.Two;
        if ((n  ==  0 || IsInRange(n % 100, 3m, 10m))) return PluralCategory.Few;
        if (IsInRange(n % 100, 11m, 19m)) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: pl
    private static PluralCategory Rule32(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  1 && v  ==  0)) return PluralCategory.One;
        if ((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14))) return PluralCategory.Few;
        if (((v  ==  0 && i != 1 && IsInRange(i % 10, 0, 1)) || (v  ==  0 && IsInRange(i % 10, 5, 9)) || (v  ==  0 && IsInRange(i % 100, 12, 14)))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: pt
    private static PluralCategory Rule33(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (IsInRange(i, 0, 1)) return PluralCategory.One;
        if (((e  ==  0 && i != 0 && i % 1000000  ==  0 && v  ==  0) || !IsInRange(e, 0, 5))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: ru, uk
    private static PluralCategory Rule34(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 10  ==  1 && i % 100 != 11)) return PluralCategory.One;
        if ((v  ==  0 && IsInRange(i % 10, 2, 4) && !IsInRange(i % 100, 12, 14))) return PluralCategory.Few;
        if (((v  ==  0 && i % 10  ==  0) || (v  ==  0 && IsInRange(i % 10, 5, 9)) || (v  ==  0 && IsInRange(i % 100, 11, 14)))) return PluralCategory.Many;

        return PluralCategory.Other;
    }


    // Rule for: shi
    private static PluralCategory Rule35(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((i  ==  0 || n  ==  1)) return PluralCategory.One;
        if (IsInRange(n, 2m, 10m)) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: si
    private static PluralCategory Rule36(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if (((n == 0m || n == 1m) || (i  ==  0 && f  ==  1))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    // Rule for: sl
    private static PluralCategory Rule37(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((v  ==  0 && i % 100  ==  1)) return PluralCategory.One;
        if ((v  ==  0 && i % 100  ==  2)) return PluralCategory.Two;
        if (((v  ==  0 && IsInRange(i % 100, 3, 4)) || v != 0)) return PluralCategory.Few;

        return PluralCategory.Other;
    }


    // Rule for: tzm
    private static PluralCategory Rule38(decimal value, int pluralWordsCount)
    {
        var (n, i, v, w, f, t, e) = GetOperands(value);
        if ((IsInRange(n, 0m, 1m) || IsInRange(n, 11m, 99m))) return PluralCategory.One;

        return PluralCategory.Other;
    }


    #endregion

    private static readonly Dictionary<string, PluralRuleDelegate> DefaultLangToDelegate = new()
    {
        { "af", Rule1 }, // one, other
        { "ak", Rule2 }, // one, other
        { "am", Rule3 }, // one, other
        { "an", Rule1 }, // one, other
        { "ar", Rule4 }, // zero, one, two, few, many, other
        { "ars", Rule4 }, // zero, one, two, few, many, other
        { "as", Rule3 }, // one, other
        { "asa", Rule1 }, // one, other
        { "ast", Rule5 }, // one, other
        { "az", Rule1 }, // one, other
        { "bal", Rule1 }, // one, other
        { "be", Rule6 }, // one, few, many, other
        { "bem", Rule1 }, // one, other
        { "bez", Rule1 }, // one, other
        { "bg", Rule1 }, // one, other
        { "bho", Rule2 }, // one, other
        { "blo", Rule7 }, // zero, one, other
        { "bm", Singular }, // other
        { "bn", Rule3 }, // one, other
        { "bo", Singular }, // other
        { "br", Rule8 }, // one, two, few, many, other
        { "brx", Rule1 }, // one, other
        { "bs", Rule9 }, // one, few, other
        { "ca", Rule10 }, // one, many, other
        { "ce", Rule1 }, // one, other
        { "ceb", Rule11 }, // one, other
        { "cgg", Rule1 }, // one, other
        { "chr", Rule1 }, // one, other
        { "ckb", Rule1 }, // one, other
        { "cs", Rule12 }, // one, few, many, other
        { "csw", Rule2 }, // one, other
        { "cy", Rule13 }, // zero, one, two, few, many, other
        { "da", Rule14 }, // one, other
        { "de", Rule5 }, // one, other
        { "doi", Rule3 }, // one, other
        { "dsb", Rule15 }, // one, two, few, other
        { "dv", Rule1 }, // one, other
        { "dz", Singular }, // other
        { "ee", Rule1 }, // one, other
        { "el", Rule1 }, // one, other
        { "en", Rule5 }, // one, other
        { "eo", Rule1 }, // one, other
        { "es", Rule16 }, // one, many, other
        { "et", Rule5 }, // one, other
        { "eu", Rule1 }, // one, other
        { "fa", Rule3 }, // one, other
        { "ff", Rule17 }, // one, other
        { "fi", Rule5 }, // one, other
        { "fil", Rule11 }, // one, other
        { "fo", Rule1 }, // one, other
        { "fr", Rule18 }, // one, many, other
        { "fur", Rule1 }, // one, other
        { "fy", Rule5 }, // one, other
        { "ga", Rule19 }, // one, two, few, many, other
        { "gd", Rule20 }, // one, two, few, other
        { "gl", Rule5 }, // one, other
        { "gsw", Rule1 }, // one, other
        { "gu", Rule3 }, // one, other
        { "guw", Rule2 }, // one, other
        { "gv", Rule21 }, // one, two, few, many, other
        { "ha", Rule1 }, // one, other
        { "haw", Rule1 }, // one, other
        { "he", Rule22 }, // one, two, other
        { "hi", Rule3 }, // one, other
        { "hnj", Singular }, // other
        { "hr", Rule9 }, // one, few, other
        { "hsb", Rule15 }, // one, two, few, other
        { "hu", Rule1 }, // one, other
        { "hy", Rule17 }, // one, other
        { "ia", Rule5 }, // one, other
        { "id", Singular }, // other
        { "ig", Singular }, // other
        { "ii", Singular }, // other
        { "io", Rule5 }, // one, other
        { "is", Rule23 }, // one, other
        { "it", Rule10 }, // one, many, other
        { "iu", Rule24 }, // one, two, other
        { "ja", Singular }, // other
        { "jbo", Singular }, // other
        { "jgo", Rule1 }, // one, other
        { "jmc", Rule1 }, // one, other
        { "jv", Singular }, // other
        { "jw", Singular }, // other
        { "ka", Rule1 }, // one, other
        { "kab", Rule17 }, // one, other
        { "kaj", Rule1 }, // one, other
        { "kcg", Rule1 }, // one, other
        { "kde", Singular }, // other
        { "kea", Singular }, // other
        { "kk", Rule1 }, // one, other
        { "kkj", Rule1 }, // one, other
        { "kl", Rule1 }, // one, other
        { "km", Singular }, // other
        { "kn", Rule3 }, // one, other
        { "ko", Singular }, // other
        { "ks", Rule1 }, // one, other
        { "ksb", Rule1 }, // one, other
        { "ksh", Rule7 }, // zero, one, other
        { "ku", Rule1 }, // one, other
        { "kw", Rule25 }, // zero, one, two, few, many, other
        { "ky", Rule1 }, // one, other
        { "lag", Rule26 }, // zero, one, other
        { "lb", Rule1 }, // one, other
        { "lg", Rule1 }, // one, other
        { "lij", Rule5 }, // one, other
        { "lkt", Singular }, // other
        { "lld", Rule10 }, // one, many, other
        { "ln", Rule2 }, // one, other
        { "lo", Singular }, // other
        { "lt", Rule27 }, // one, few, many, other
        { "lv", Rule28 }, // zero, one, other
        { "mas", Rule1 }, // one, other
        { "mg", Rule2 }, // one, other
        { "mgo", Rule1 }, // one, other
        { "mk", Rule29 }, // one, other
        { "ml", Rule1 }, // one, other
        { "mn", Rule1 }, // one, other
        { "mo", Rule30 }, // one, few, other
        { "mr", Rule1 }, // one, other
        { "ms", Singular }, // other
        { "mt", Rule31 }, // one, two, few, many, other
        { "my", Singular }, // other
        { "nah", Rule1 }, // one, other
        { "naq", Rule24 }, // one, two, other
        { "nb", Rule1 }, // one, other
        { "nd", Rule1 }, // one, other
        { "ne", Rule1 }, // one, other
        { "nl", Rule5 }, // one, other
        { "nn", Rule1 }, // one, other
        { "nnh", Rule1 }, // one, other
        { "no", Rule1 }, // one, other
        { "nqo", Singular }, // other
        { "nr", Rule1 }, // one, other
        { "nso", Rule2 }, // one, other
        { "ny", Rule1 }, // one, other
        { "nyn", Rule1 }, // one, other
        { "om", Rule1 }, // one, other
        { "or", Rule1 }, // one, other
        { "os", Rule1 }, // one, other
        { "osa", Singular }, // other
        { "pa", Rule2 }, // one, other
        { "pap", Rule1 }, // one, other
        { "pcm", Rule3 }, // one, other
        { "pl", Rule32 }, // one, few, many, other
        { "prg", Rule28 }, // zero, one, other
        { "ps", Rule1 }, // one, other
        { "pt", Rule33 }, // one, many, other
        { "pt-PT", Rule10 }, // one, many, other
        { "rm", Rule1 }, // one, other
        { "ro", Rule30 }, // one, few, other
        { "rof", Rule1 }, // one, other
        { "ru", Rule34 }, // one, few, many, other
        { "rwk", Rule1 }, // one, other
        { "sah", Singular }, // other
        { "saq", Rule1 }, // one, other
        { "sat", Rule24 }, // one, two, other
        { "sc", Rule5 }, // one, other
        { "scn", Rule10 }, // one, many, other
        { "sd", Rule1 }, // one, other
        { "sdh", Rule1 }, // one, other
        { "se", Rule24 }, // one, two, other
        { "seh", Rule1 }, // one, other
        { "ses", Singular }, // other
        { "sg", Singular }, // other
        { "sh", Rule9 }, // one, few, other
        { "shi", Rule35 }, // one, few, other
        { "si", Rule36 }, // one, other
        { "sk", Rule12 }, // one, few, many, other
        { "sl", Rule37 }, // one, two, few, other
        { "sma", Rule24 }, // one, two, other
        { "smi", Rule24 }, // one, two, other
        { "smj", Rule24 }, // one, two, other
        { "smn", Rule24 }, // one, two, other
        { "sms", Rule24 }, // one, two, other
        { "sn", Rule1 }, // one, other
        { "so", Rule1 }, // one, other
        { "sq", Rule1 }, // one, other
        { "sr", Rule9 }, // one, few, other
        { "ss", Rule1 }, // one, other
        { "ssy", Rule1 }, // one, other
        { "st", Rule1 }, // one, other
        { "su", Singular }, // other
        { "sv", Rule5 }, // one, other
        { "sw", Rule5 }, // one, other
        { "syr", Rule1 }, // one, other
        { "ta", Rule1 }, // one, other
        { "te", Rule1 }, // one, other
        { "teo", Rule1 }, // one, other
        { "th", Singular }, // other
        { "ti", Rule2 }, // one, other
        { "tig", Rule1 }, // one, other
        { "tk", Rule1 }, // one, other
        { "tl", Rule11 }, // one, other
        { "tn", Rule1 }, // one, other
        { "to", Singular }, // other
        { "tpi", Singular }, // other
        { "tr", Rule1 }, // one, other
        { "ts", Rule1 }, // one, other
        { "tzm", Rule38 }, // one, other
        { "ug", Rule1 }, // one, other
        { "uk", Rule34 }, // one, few, many, other
        { "und", Singular }, // other
        { "ur", Rule5 }, // one, other
        { "uz", Rule1 }, // one, other
        { "ve", Rule1 }, // one, other
        { "vec", Rule10 }, // one, many, other
        { "vi", Singular }, // other
        { "vo", Rule1 }, // one, other
        { "vun", Rule1 }, // one, other
        { "wa", Rule2 }, // one, other
        { "wae", Rule1 }, // one, other
        { "wo", Singular }, // other
        { "xh", Rule1 }, // one, other
        { "xog", Rule1 }, // one, other
        { "yi", Rule5 }, // one, other
        { "yo", Singular }, // other
        { "yue", Singular }, // other
        { "zh", Singular }, // other
        { "zu", Rule3 }, // one, other

    };

    public static Dictionary<string, PluralRuleDelegate> IsoLangToDelegate { get; private set; } = new(DefaultLangToDelegate);

    public static void RestoreDefault() => IsoLangToDelegate = new Dictionary<string, PluralRuleDelegate>(DefaultLangToDelegate);

    public delegate PluralCategory PluralRuleDelegate(decimal value, int pluralWordsCount);
        
    public static PluralRuleDelegate GetPluralRule(string? twoLetterIsoLanguageName)
    {
        if (twoLetterIsoLanguageName != null && IsoLangToDelegate.TryGetValue(twoLetterIsoLanguageName, out var rule))
            return rule;
        
        return IsoLangToDelegate["und"];
    }

    #region CLDR Helper methods

    /// <summary>
    /// n => The absolute value of the input number (e.g., 1, 2.5, 0.01)
    /// u => The integer digits of n (deprecated in CLDR, but may appear in legacy rules)
    /// v => Number of visible fraction digits in n (e.g., 1.5 => v = 1)
    /// w => Number of visible fraction digits excluding trailing zeros (e.g., 1.50 => w = 1)
    /// f => Visible fraction digits as an integer (e.g., 1.25 => f = 25)
    /// t => Visible fraction digits excluding trailing zeros (e.g., 1.50 => t = 5) 
    /// </summary>
    private static (decimal n, long i, int v, int w, long f, long t, int e) GetOperands(decimal value)
    {
        var n = Math.Abs(value);
        var s = value.ToString(CultureInfo.InvariantCulture);
        long i = (long) Math.Truncate(n);
        int v = 0, w = 0, e = 0;
        long f = 0, t = 0;

        var decPoint = s.IndexOf('.');
        if (decPoint != -1)
        {
            var fractionStr = s.Substring(decPoint + 1);
            v = fractionStr.Length;
            long.TryParse(fractionStr, NumberStyles.Integer, CultureInfo.InvariantCulture, out f);

            var fractionStrTrimmed = fractionStr.TrimEnd('0');
            w = fractionStrTrimmed.Length;
            long.TryParse(fractionStrTrimmed, NumberStyles.Integer, CultureInfo.InvariantCulture, out t);
        }

        return (n, i, v, w, f, t, e);
    }

    private static bool IsInRange(long val, long min, long max) => val >= min && val <= max;
    
    private static bool IsInRange(decimal val, decimal min, decimal max)
    {
        // First check if value is within the range
        if (val < min || val > max)
            return false;

        // If min and max are integers (whole numbers), then require val to also be integer
        // This for rules like 'n = 2..4' which should not match '2.5'
        if (min == Math.Truncate(min) && max == Math.Truncate(max))
        {
            return val == Math.Truncate(val);
        }

        return true;
    }

    #endregion
}
